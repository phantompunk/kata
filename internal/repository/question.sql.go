// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: question.sql

package repository

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO questions (
  question_id, title, title_slug, difficulty, function_name, content, code_snippets, test_cases, created_at
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?, DATE('now')
) RETURNING question_id, title, title_slug, difficulty, function_name, content, code_snippets, test_cases, created_at
`

type CreateParams struct {
	QuestionID   int64
	Title        string
	TitleSlug    string
	Difficulty   string
	FunctionName string
	Content      string
	CodeSnippets string
	TestCases    string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, create,
		arg.QuestionID,
		arg.Title,
		arg.TitleSlug,
		arg.Difficulty,
		arg.FunctionName,
		arg.Content,
		arg.CodeSnippets,
		arg.TestCases,
	)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.Title,
		&i.TitleSlug,
		&i.Difficulty,
		&i.FunctionName,
		&i.Content,
		&i.CodeSnippets,
		&i.TestCases,
		&i.CreatedAt,
	)
	return i, err
}

const exists = `-- name: Exists :one
SELECT EXISTS (
  SELECT 1 FROM questions
  WHERE title_slug = ?
)
`

func (q *Queries) Exists(ctx context.Context, titleSlug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, exists, titleSlug)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getByID = `-- name: GetByID :one
SELECT question_id, title, title_slug, difficulty, function_name, content, code_snippets, test_cases, created_at FROM questions
WHERE question_id = ? LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, questionID int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getByID, questionID)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.Title,
		&i.TitleSlug,
		&i.Difficulty,
		&i.FunctionName,
		&i.Content,
		&i.CodeSnippets,
		&i.TestCases,
		&i.CreatedAt,
	)
	return i, err
}

const getBySlug = `-- name: GetBySlug :one
SELECT question_id, title, title_slug, difficulty, function_name, content, code_snippets, test_cases, created_at FROM questions
WHERE title_slug = ? LIMIT 1
`

func (q *Queries) GetBySlug(ctx context.Context, titleSlug string) (Question, error) {
	row := q.db.QueryRowContext(ctx, getBySlug, titleSlug)
	var i Question
	err := row.Scan(
		&i.QuestionID,
		&i.Title,
		&i.TitleSlug,
		&i.Difficulty,
		&i.FunctionName,
		&i.Content,
		&i.CodeSnippets,
		&i.TestCases,
		&i.CreatedAt,
	)
	return i, err
}

const getRandom = `-- name: GetRandom :one
SELECT q.question_id, q.title, q.title_slug, q.difficulty, COALESCE(s.solved, 0) AS solved,
    COALESCE(s.last_attempted, q.created_at) AS last_attempted
FROM questions q
LEFT JOIN submissions s ON s.question_id = q.question_id
WHERE q.question_id = (
    SELECT question_id FROM questions
    ORDER BY RANDOM()
    LIMIT 1
) LIMIT 1
`

type GetRandomRow struct {
	QuestionID    int64
	Title         string
	TitleSlug     string
	Difficulty    string
	Solved        int64
	LastAttempted string
}

func (q *Queries) GetRandom(ctx context.Context) (GetRandomRow, error) {
	row := q.db.QueryRowContext(ctx, getRandom)
	var i GetRandomRow
	err := row.Scan(
		&i.QuestionID,
		&i.Title,
		&i.TitleSlug,
		&i.Difficulty,
		&i.Solved,
		&i.LastAttempted,
	)
	return i, err
}

const getStats = `-- name: GetStats :one
SELECT
    COUNT(DISTINCT s.question_id) AS attempted,
    COUNT(DISTINCT CASE WHEN s.solved = 1 THEN s.question_id END) AS completed
FROM submissions s
`

type GetStatsRow struct {
	Attempted int64
	Completed int64
}

func (q *Queries) GetStats(ctx context.Context) (GetStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getStats)
	var i GetStatsRow
	err := row.Scan(&i.Attempted, &i.Completed)
	return i, err
}

const listAll = `-- name: ListAll :many
SELECT question_id, title, title_slug, difficulty, function_name, content, code_snippets, test_cases, created_at FROM questions
ORDER BY question_id ASC
`

func (q *Queries) ListAll(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.QuestionID,
			&i.Title,
			&i.TitleSlug,
			&i.Difficulty,
			&i.FunctionName,
			&i.Content,
			&i.CodeSnippets,
			&i.TestCases,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const submit = `-- name: Submit :one
INSERT INTO submissions (
  id, question_id, lang_slug, solved, last_attempted
) VALUES (
  ?, ?, ?, ?, ?
) RETURNING id, question_id, lang_slug, solved, last_attempted
`

type SubmitParams struct {
	ID            int64
	QuestionID    int64
	LangSlug      string
	Solved        int64
	LastAttempted string
}

func (q *Queries) Submit(ctx context.Context, arg SubmitParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, submit,
		arg.ID,
		arg.QuestionID,
		arg.LangSlug,
		arg.Solved,
		arg.LastAttempted,
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.QuestionID,
		&i.LangSlug,
		&i.Solved,
		&i.LastAttempted,
	)
	return i, err
}
