// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: question.sql

package repository

import (
	"context"
)

const create = `-- name: Create :one
INSERT INTO questions (
  questionId, title, titleSlug, difficulty, functionName, content, codeSnippets, testCases
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING questionid, title, titleslug, difficulty, functionname, content, codesnippets, testcases
`

type CreateParams struct {
	Questionid   int64
	Title        string
	Titleslug    string
	Difficulty   string
	Functionname string
	Content      string
	Codesnippets string
	Testcases    string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, create,
		arg.Questionid,
		arg.Title,
		arg.Titleslug,
		arg.Difficulty,
		arg.Functionname,
		arg.Content,
		arg.Codesnippets,
		arg.Testcases,
	)
	var i Question
	err := row.Scan(
		&i.Questionid,
		&i.Title,
		&i.Titleslug,
		&i.Difficulty,
		&i.Functionname,
		&i.Content,
		&i.Codesnippets,
		&i.Testcases,
	)
	return i, err
}

const exists = `-- name: Exists :one
SELECT EXISTS (
  SELECT 1 FROM questions
  WHERE titleSlug = ?
)
`

func (q *Queries) Exists(ctx context.Context, titleslug string) (int64, error) {
	row := q.db.QueryRowContext(ctx, exists, titleslug)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const getByID = `-- name: GetByID :one
SELECT questionid, title, titleslug, difficulty, functionname, content, codesnippets, testcases FROM questions
WHERE questionId = ? LIMIT 1
`

func (q *Queries) GetByID(ctx context.Context, questionid int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getByID, questionid)
	var i Question
	err := row.Scan(
		&i.Questionid,
		&i.Title,
		&i.Titleslug,
		&i.Difficulty,
		&i.Functionname,
		&i.Content,
		&i.Codesnippets,
		&i.Testcases,
	)
	return i, err
}

const getBySlug = `-- name: GetBySlug :one
SELECT questionid, title, titleslug, difficulty, functionname, content, codesnippets, testcases FROM questions
WHERE titleSlug = ? LIMIT 1
`

func (q *Queries) GetBySlug(ctx context.Context, titleslug string) (Question, error) {
	row := q.db.QueryRowContext(ctx, getBySlug, titleslug)
	var i Question
	err := row.Scan(
		&i.Questionid,
		&i.Title,
		&i.Titleslug,
		&i.Difficulty,
		&i.Functionname,
		&i.Content,
		&i.Codesnippets,
		&i.Testcases,
	)
	return i, err
}

const getRandom = `-- name: GetRandom :one
SELECT questionid, title, titleslug, difficulty, functionname, content, codesnippets, testcases FROM questions
ORDER BY RANDOM() LIMIT 1
`

func (q *Queries) GetRandom(ctx context.Context) (Question, error) {
	row := q.db.QueryRowContext(ctx, getRandom)
	var i Question
	err := row.Scan(
		&i.Questionid,
		&i.Title,
		&i.Titleslug,
		&i.Difficulty,
		&i.Functionname,
		&i.Content,
		&i.Codesnippets,
		&i.Testcases,
	)
	return i, err
}

const listAll = `-- name: ListAll :many
SELECT questionid, title, titleslug, difficulty, functionname, content, codesnippets, testcases FROM questions
ORDER BY questionId ASC
`

func (q *Queries) ListAll(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.Questionid,
			&i.Title,
			&i.Titleslug,
			&i.Difficulty,
			&i.Functionname,
			&i.Content,
			&i.Codesnippets,
			&i.Testcases,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
