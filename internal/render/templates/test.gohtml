{{define "test"}}{{end}}

{{define "gotest"}}package kata

import (
  "testing"

  "github.com/stretchr/testify/assert"
)

func Test{{ pascalCase .FunctionName }}(t *testing.T) {
  testCases := []struct {
    name     string
    input    string
    expected string
  }{
    // Add your test cases here
  }

  for _, tc := range testCases {
    t.Run(tc.name, func(t *testing.T) {
      result := {{ .FunctionName }}(tc.input)
      assert.Equal(t, tc.expected, result)
    })
  }
}
{{end}}

{{define "pytest"}}import unittest

from {{ .Slug }} import {{ .FunctionName }}


class Test{{ pascalCase .FunctionName }}(unittest.TestCase):
    def test_cases(self):
        test_cases = [
            # Add your test cases here
        ]

        for input_val, expected_val in test_cases:
            with self.subTest(input=input_val):
                result = {{ .FunctionName }}(input_val)
                self.assertEqual(result, expected_val)


if __name__ == "__main__":
    unittest.main()
{{end}}

{{define "jest"}}const { {{ .FunctionName }} } = require('./{{ snakeCase .Slug }}');

describe('{{ .FunctionName }}', () => {
    it('should pass example test cases', () => {
        // Add your test cases here
        expect({{ .FunctionName }}()).toBeDefined();
    });

    it('should handle edge cases', () => {
        // Add edge case tests here
    });
});
{{end}}


{{define "jest-ts"}}import { {{ .FunctionName }} } from './{{ snakeCase .Slug }}';

describe('{{ .FunctionName }}', () => {
    it('should pass example test cases', () => {
        // Add your test cases here
        expect({{ .FunctionName }}()).toBeDefined();
    });

    it('should handle edge cases', () => {
        // Add edge case tests here
    });
});
{{end}}

{{define "rust-test"}}#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_{{ snakeCase .FunctionName }}() {
        let test_cases = vec![
            // Add your test cases here
            // (input, expected),
        ];

        for (input, expected) in test_cases {
            let result = {{ snakeCase .FunctionName }}(input);
            assert_eq!(result, expected);
        }
    }
}
{{end}}
